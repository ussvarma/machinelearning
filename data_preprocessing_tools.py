# -*- coding: utf-8 -*-
"""data_preprocessing_tools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KIo7HLLFZVUUhogPCWTc46KUzCEqluB-

# Data Preprocessing Tools

# Importing the libraries
"""

import numpy as np
import pandas as pd

"""# Importing the dataset"""

dataset = pd.read_csv('datasets/Data.csv')
x = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].to_numpy()

"""## Taking care of missing data"""

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values=np.nan, strategy="mean")
x[:, 1:3] = imputer.fit_transform(x[:, 1:3])

"""## Encoding categorical data"""

print("x:",x)

"""#### otherways of encoding technique

x_df=pd.DataFrame(x,columns=["country","age","salary"]) 

converting numpy into dataframe

x_df["age"]=x_df["age"].apply(int)

converting datatype of age column into interger

x_df["salary"]=x_df["salary"].apply(int)

x=pd.get_dummies(x_df)

### Encoding the Independent Variable
"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder="passthrough")
x = ct.fit_transform(x)

"""### Encoding the Dependent Variable"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
y = le.fit_transform(y)


"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)  # order is important

print("x_train:",x_train)

print("x_test",x_test)

print("y_train",y_train)

print("y_test",y_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
x_train[:, 3:] = sc.fit_transform(x_train[:, 3:])
x_test[:, 3:] = sc.transform(x_test[:, 3:])

print("x_train",x_train)

print("x_test",x_test)

"""#Notes
   
    1.DataFrame.to_numpy(dtype=None, copy=False, na_value=NoDefault.no_default) ----->Converts the DataFrame to a NumPy array.
    alternative to pd.df.values
"""
