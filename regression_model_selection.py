# -*- coding: utf-8 -*-
"""Regression_model_selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13_LLhloKA4huKa2ZZ--9g1WLO1GWnUru

# Regression model
"""

import numpy as np
import pandas as pd

dataset=pd.read_csv("datasets/winequality-red.csv")
x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

dataset.isnull().sum()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.linear_model import LinearRegression
linear_regressor=LinearRegression()
linear_regressor.fit(x_train,y_train)

y_pred=linear_regressor.predict(x_test)
np.set_printoptions(precision=2)
comparison_matrix=np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_pred),1)),1)
"""## Evaluating model"""

from sklearn.metrics import r2_score
print("multiple_regression",r2_score(y_test,y_pred))

"""#Polynomial regression

## From training model
"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
poly_reg=PolynomialFeatures(degree=4)
x_poly = poly_reg.fit_transform(x)
lin_reg = LinearRegression()
lin_reg.fit(x_poly, y)

"""##Predicting the test results"""

y_pred=lin_reg.predict(poly_reg.transform(x_test))
np.set_printoptions(precision=3)
comparison_matrix=np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_pred),1)),1)

from sklearn.metrics import r2_score
print("polynomial:",r2_score(y_test,y_pred))

"""#Support vector regression

##Feature scaling
"""

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
sc_y=StandardScaler()
x_train=sc_x.fit_transform(x_train)
y_train=sc_y.fit_transform(y_train.reshape(-1,1))

"""##Training the SVR model on training set"""

from sklearn.svm import SVR
svr_regressor=SVR(kernel="rbf")
svr_regressor.fit(x_train,y_train)

"""##Predicting the test set results"""

y_pred=sc_y.inverse_transform(svr_regressor.predict(sc_x.transform(x_test)).reshape(-1,1))
np.set_printoptions(precision=3)
comparison_matrix=np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_pred),1)),1)

from sklearn.metrics import r2_score
print("support vector regression:",r2_score(y_test,y_pred))

"""#Decision tree"""

dataset=pd.read_csv("datasets/winequality-red.csv")
x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2, random_state=0)

"""##Training the data """

from sklearn.tree import DecisionTreeRegressor
decision_tree_regressor=DecisionTreeRegressor()
decision_tree_regressor.fit(x_train,y_train)

y_pred=decision_tree_regressor.predict(x_test)
np.set_printoptions(precision=3)
comparison_matrix=np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_pred),1)),1)

from sklearn.metrics import r2_score
print("decision tree regression:",r2_score(y_test,y_pred))

"""#Random Forest Regressor"""

from sklearn.ensemble import RandomForestRegressor
Random_forest_regressor=RandomForestRegressor(n_estimators=10)
Random_forest_regressor.fit(x_train,y_train)

"""##Predicting"""

y_pred=Random_forest_regressor.predict(x_test)
np.set_printoptions(precision=3)
comparison_matrix=np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_pred),1)),1)


from sklearn.metrics import r2_score
print("random_forest_regression",r2_score(y_test,y_pred))

"""##Observation:
1.Out of all models polynomial model is optimal one
"""