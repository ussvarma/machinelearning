# -*- coding: utf-8 -*-
"""k_nearest_neighbors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enj58QHWSnlTbsPeNbbl85r2Pip0N4q2

# K-Nearest Neighbors (K-NN)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('datasets/Social_Network_Ads.csv')
x = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=0, test_size=0.25)

print(x_train)

print(y_train)

print(x_test)

print(y_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

print(x_train)

print(x_test)

"""## Training the K-NN model on the Training set"""

from sklearn.neighbors import KNeighborsClassifier


def find_k_value():  # finding k value
    error1 = []
    error2 = []
    for k in range(1, 15):
        knn = KNeighborsClassifier(n_neighbors=k)
        knn.fit(x_train, y_train)
        y_pred1 = knn.predict(x_train)
        error1.append(np.mean(y_train != y_pred1))
        y_pred2 = knn.predict(x_test)
        error2.append(np.mean(y_test != y_pred2))
    plt.figure(figsize=(10, 5))
    error1 = np.array(error1)
    plt.plot(range(1, 15), error1, label="train")
    plt.plot(range(1, 15), error2, label="test")
    plt.xlabel('k Value')
    plt.ylabel('Error')
    plt.show()


find_k_value()
classifier = KNeighborsClassifier(n_neighbors=3)
classifier.fit(x_train, y_train)
"""## Predicting a new result"""

print(classifier.predict(sc.transform([[30, 87000]])))

"""## Predicting the Test set results"""

y_pred = classifier.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score

cm = confusion_matrix(y_test, y_pred)
print(cm)
print("accuracy score:", accuracy_score(y_test, y_pred))

